# -*- coding: utf-8 -*-
"""(Anime)stablediffusion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EV686qtFncaJKp-LWL4lCX7UormEzsXD
"""

!pip install diffusers["torch"] transformers
!pip install accelerate
!pip install git+https://github.com/huggingface/diffusers

import torch
from diffusers import StableDiffusionPipeline

class generate:
   def __init__(self,description,epochs):
       self.pipe = StableDiffusionPipeline.from_pretrained("redstonehero/cetusmix_v4", torch_dtype=torch.float16)
       self.pipe = self.pipe.to("cuda")
       self.pipe.safety_checker = None
       self.description = description
       self.h = 600
       self.w = 1020
       self.steps = epochs
       self.guidance = 8.5
       self.neg = "easynegative, human, lowres, bad anatomy, bad hands anatomy, text, error, missing fingers, extra digit, fewer digits, cropped, worstquality,bad face, low quality, normal quality, jpegartifacts, signature, watermark, username, blurry, bad feet, cropped, poorly drawn hands, poorly drawn face, mutation, deformed, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, extra fingers, fewer digits, extra limbs, extra arms,extra legs, malformed limbs, fused fingers, too many fingers, long neck, cross-eyed,mutated hands, polar lowres, bad body, bad proportions, gross proportions, text, error, missing fingers, missing arms, missing legs, extra digit, extra arms, extra leg, extra foot,"

   def print(self):
       self.image = self.pipe(self.description, height=self.h, weight=self.w, num_inference_steps=self.steps, guidance_scale=self.guidance, negative_prompt=self.neg).images[0]

   @classmethod
   def newTask(cls,text,epochs):
       return cls(text,epochs)

import ipywidgets as widgets
from IPython.display import display

class DataCompiler:
    def __init__(self,list_prompt):
        self.list_prompt = list_prompt

    def compile(self):
        text = list(map(lambda data: data.value,self.list_prompt))
        self.prompt = str(", ".join(text))
        print(self.prompt)
        self.Generate = generate.newTask(self.prompt, 100)
        generate.print(self.Generate)
        self.image = self.Generate.image

    @classmethod
    def newTask(cls,prompt):
        return cls(prompt)

# Create Widgets
gender = widgets.Text(description="Gender: ")
hair = widgets.Text(description="Hair: ")
cloths = widgets.Text(description="Cloths: ")
emotion = widgets.Text(description="Expression: ")
background = widgets.Text(description="Background: ")
other = widgets.Text(description="Others: ")
list_widgets = (gender, hair, cloths, emotion, background, other)

image_generator = DataCompiler.newTask(list_widgets)

display(gender, hair, cloths, emotion, background, other)

DataCompiler.compile(image_generator)
DataCompiler.image

text = input("Description: ")
epochs = int(input("How name steps?: "))
Generate = generate.newTask(text,epochs)
generate.print(Generate)
image = Generate.image
image